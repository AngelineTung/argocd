#argocd application is a group of manifests

alias k=kubectl

#setting namespace default to argocd so dont have to define -n argocd for every command
k config set-context --current --namespace=argocd

#get password
k get secret
k get secret argocd-initial-admin-secret -o yaml
echo Vms4TGpYbXhTZ09DOENnMQ== | base64 --decode      (Vk8LjXmxSgOC8Cg1)

#get ip add of node
k get node -o wide

#login to cli
argocd login 172.30.2.2:32073 --insecure --grpc-web

#we want a group of manifests to work with them as example. For that, we will create nginx helm chart to have a group of manifests as example. We will push to our git repository some new codes

#create a new dir for this session
mkdir v03-argocd-applications
cd v03-argocd-applications
mkdir helm
cd helm
helm create nginx
cd nginx

# push manifests to git
git init
git status
git add .
git status
git commit -m "Creating Nginx Helm Chart as the source of examples"
git branch -M main
git remote add origin echo "# argocd" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/AngelineTung/argocd.git
git push -u origin main

#let's write a manifest from scratch to write a crd

vim application-1.yml

'''
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: application-from-scratch
spec:
  destination:
    namespace: default    --> this is where the application will be deployed
    server: https://kubernetes.default.svc   --> type the following to get this address-> argocd cluster list --grpc-web   (note assume this is within cluster and not connecting to remote cluster)
    project: default                        (necessary to define this as application should be in project)
    source: 
	path: helm/nginx                 (should be the path where the manifests that we need are in the git repo. this example is just argo as we put in them in the main folder)
	repoURL: https://github.com/AngelineTung/argocd.git           (url for our git repo)
	targetRevision: main                 (can use branch name)


'''
#do apply. -f flag tells kubectl that you're applying a file.
k apply -f application-1.yml


#see all resources deployed with argocd
k get all -n default

#note now status is sync. means ideal and target state are sync. let's make a change to get it unsync
# change the replica number from 1 to 2 in values.yml (GitHub) and then commit changes and push)

